** 답은 밑에 있습니다. **

1. '-' 두개일때 각각의 자리 구하는 쿼리 ex) 010-1234-5678

2. 사번이 100~199번인 사원의 사번, 이름, 급여, 커미션포함급여 ( 100자리수표시)


3. 사원번호, 이름, 급여, 커미션포함급여, 커미션포함급여가 속한 급여등급을 표시 (커미션포함급여로 내림차순)
 -- 급여등급은 job_grades 테이블을 참고


4.
-- phone_number 에서 '.' 구분자가 3개면 핸드폰번호, 2개면 집 전화번호 라고 가정하고 
   집전화번호는 앞에 '02.' 을 추가하고(concat 사용) 핸드폰번호는 그대로 두고 출력한다.
-- 최종출력 : 사번, 기존폰번호, 변경된번호, 폰번호 종류


5.
-- job_id 를 통해 어떤 사업부에서 일하는지 분류하여라.(job_id 의 '_' 이전이 사업부코드라 가정하며 _이전에는 몇개의 알파벳이 올지 알 수 없다.)
-- ad : Administration
-- ac : Accounting
-- sa : Sales
-- st : Stock
-- it : It
-- mk : Marketing
-- 최종형태 : 사번, last_name(이름), job_id(직업코드), 사업부
-- 정렬은 사업부, 사번 순으로 오름차순


6.
-- 근속일에 따른 커미션 상승과 근속월에 따른 임금상승을 하려고 한다.
-- 커미션상승은 근속일 8천미만은 +1, 1만미만은 +2, 그 이상은 +3 (기존에 commission_pct 없다면 0으로 생각)
-- 임금상승은 250주 미만은 +1000 , 300주 미만은 +2000, 350주 미만은 +3000, 350주 이상은 + 5000 을 한 값을 구하라.
-- 사번, 입사일, 기존 커미션, 상승된커미션, 기존임금, 상승된임금 (사번, 입사일순으로 오름차순)


7.
-- 1. 다음의 조건들을 만족하는 "결과" 열을 출력하세요 (내림차순으로 정렬)
-- 1) 부서 번호가 없는 경우 : 풀 네임
-- 2) 관리자 번호가 없는 경우 : 고용 일을 XXXX-YY-ZZ 형식으로
-- 3) 커미션을 알 수 있는 경우 : 봉급에 커미션을 포함하여 십의 자리에서 반올림하고 5자리로 표현 (단, 5자리 보다 작을 경우 공백 처리)
------ 1), 2), 3) 조건을 만족하지 않는 경우 --
-- 4) 이름이 3글자인 경우 : 현재 날짜 기준으로 근속 년수
-- 5) IT로 시작하는 직무인 경우 : 전화번호
------ 4), 5) 조건을 만족하지 않는 경우 --
-- 6) 고용일이 80년대인 경우 : 봉급을 5자리로 표현 (단, 5자리 보다 작을 경우 공백 처리)
-- 7) 그 외의 경우 : 이메일
















1.
SELECT  '010-34-568' pnum, 
        substr('010-34-568', 1, (instr('010-34-568', '-')-1)) pnum1, 
        substr('010-34-568', instr('010-34-568', '-') +1 , (instr('010-34-568', '-', (instr('010-34-568', '-')+1)) - instr('010-34-568', '-')-1)) pnum2,
        substr('010-34-568', (instr('010-34-568', '-', instr('010-34-568', '-')+1)+1)) pnum3
        
FROM    dual;


2.
select employee_id, first_name, salary, round(salary+salary*nvl(commission_pct, 0), -2)
where employee_id between 100 and 199;
from employees

3.
select employee_id, first_name, salary, salary+salary*nvl(commission_pct, 0 ),
      case
      when salary+salary*nvl(commission_pct, 0 ) <3000
      then 'A'
      when salary+salary*nvl(commission_pct, 0 ) <6000
      then 'B'
      when salary+salary*nvl(commission_pct, 0 )<10000
      then 'C'
      when salary+salary*nvl(commission_pct, 0 ) < 15000
      then 'D'
      when salary+salary*nvl(commission_pct, 0 ) < 25000
      then 'E'
      else 'F'
      end 급여등급
      from employees
order by salary+salary*nvl(commission_pct, 0 ) desc;

4.
select 
    employee_id
    , phone_number
    , case
        when instr(phone_number, '.', 1, 3) = 0 then
            concat('02.', phone_number) 
        else
            phone_number
      end as "변경된 번호" 
    , case
        when instr(phone_number, '.', 1, 3) = 0 then
            '집 번호'
        else
            '핸드폰 번호'
      end as "폰번호 종류"
from
    employees
;

5.
select
    employee_id as 사번
    , last_name as 이름
    , job_id as 직업코드
    --, substr(lower(job_id),1, instr(job_id, '_' )-1)
    , case
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'ad' then
            'Administration'
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'ac' then
            'Accounting'
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'sa' then
            'Sales'
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'st' then
            'Stock'
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'it' then
            'It'
        when substr(lower(job_id),1, instr(job_id, '_' )-1) = 'mk' then
            'Marketing'
        else
            '사업부없음'
      end as "사업부"
from
    employees
order by 사업부, employee_id
;

6. 
select
    employee_id as 사번
    , hire_date as 입사일
    , nvl(commission_pct,0) as 기존커미션
    , case
        when sysdate - hire_date < 8000 then
            nvl(commission_pct,0) + 1
        when sysdate - hire_date < 10000 then
            nvl(commission_pct,0) + 2
        else
            nvl(commission_pct,0) + 3
      end as "상승된커미션"  
    , salary as 기존임금
    , case
        when months_between(sysdate, hire_date) < 250 then
            salary + 1000
        when months_between(sysdate, hire_date) < 300 then
            salary + 2000
        when months_between(sysdate, hire_date) < 350 then
            salary + 3000
        else
            salary + 5000
      end as 상승된임금
from
    employees
order by employee_id, hire_date
;

7. 
SELECT
    CASE 
        WHEN (department_id is null) THEN first_name || ' ' || last_name
        WHEN (manager_id is null) THEN to_char(hire_date, 'yyyy-mm-dd')
        WHEN (commission_pct is not null) THEN to_char(trunc(salary * (1 + commission_pct), -2), '99999')
        ELSE CASE
                    WHEN (first_name like '___') THEN to_char(round(sysdate - hire_date, 0) / 365, '99')
                    WHEN (job_id like 'IT%') THEN phone_number
                    ELSE CASE
                                WHEN (to_char(hire_date, 'yy') like '8%') THEN to_char(salary, '99999')
                                ELSE email
                            END
                END
    END "결과"
FROM
    employees
ORDER BY
    "결과" desc;